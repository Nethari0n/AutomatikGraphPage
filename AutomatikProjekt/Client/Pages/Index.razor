@page "/"

@using System.Globalization
@using AutomatikProjekt.Shared
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row">
        <div class="col-sm-12 my-5">
            <RadzenCard class="w-100 mb-4" Style="display: flex; align-items: center; gap: 0.5rem">
                <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox>
                <RadzenLabel Text="Smooth" Component="smooth" Style="margin-right: 1rem;" />
                <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                <RadzenLabel Text="Show Data Labels" Component="dataLabels" Style="margin-right: 1rem;" />
                <RadzenCheckBox @bind-Value="@showMarkers" Name="markers"></RadzenCheckBox>
                <RadzenLabel Text="Show Markers" Component="markers" />
            </RadzenCard>
            <RadzenChart>
                <RadzenLineSeries Smooth="@smooth" Data="@temperatures" CategoryProperty="TimeStamp" Title="2023" LineType="LineType.Dashed" ValueProperty="Temperature">
                    <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Square" />
                    <RadzenSeriesDataLabels Visible="@showDataLabels" />
                </RadzenLineSeries>
                @*  <RadzenLineSeries Smooth="@smooth" Data="@revenue2024" CategoryProperty="Date" Title="2024" ValueProperty="Revenue">
                <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Circle" />
                <RadzenSeriesDataLabels Visible="@showDataLabels" />
                </RadzenLineSeries> *@
                <RadzenCategoryAxis Padding="20" />
                @*    <RadzenValueAxis Formatter="@FormatAsUSD">
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="Revenue in USD" />
                </RadzenValueAxis> *@
            </RadzenChart>
        </div>
    </div>
</div>

@code {
    bool smooth = false;
    bool showDataLabels = false;
    bool showMarkers = true;

    List<TemperatureSensor> temperatures = new();
    TemperatureSensor temperatureSensor = new();
    HubConnection Connection = default!;


    protected override async Task OnInitializedAsync()
    {
        Connection = new HubConnectionBuilder()
               .WithUrl("https://localhost:7075/sensorhub")
              .Build();

        Connection.On<List<TemperatureSensor>>("ReceiveTemperatureSensorList", async (receivedTemperatures) =>
        {
            temperatures = receivedTemperatures;
            await InvokeAsync(StateHasChanged);

        });

        Connection.On<TemperatureSensor>("ReceiveLatestTemperature", async (receivedTemperature) =>
       {
           temperatureSensor = receivedTemperature;
           temperatures.Add(receivedTemperature);

           // allDeviceTelemetries = GetSortedTelemetriesTime();
           // deviceTelemetries = GetSortedTelemtriesDevice();

           await InvokeAsync(StateHasChanged);
       });


        await Connection.StartAsync();

        await Connection.SendAsync("GetTemperatureSensor");
    }


}
