@page "/"

@using System.Globalization
@using AutomatikProjekt.Shared
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row">
        <div class="col-12 nborder shadow-sm p-2 mh-100 mt-2 PaddingGraph">
            <RadzenCard class="w-100 mb-4" Style="display: flex; align-items: center; gap: 0.5rem; justify-content: space-between">
                <div>
                    <RadzenLabel Text="Vis Markører:" Component="markers" />
                    <RadzenCheckBox @bind-Value="@showMarkers" Name="markers" class="mr-2"></RadzenCheckBox>
                </div>
                <div>
                    <RadzenLabel Text="Start Dato:" Component="StartDate" />
                    <RadzenDatePicker @bind-Value=@StartDate ShowTime="true" HoursStep="1" MinutesStep="5" DateFormat="dd/MM/yyyy HH:mm" Name="StartDate" />
                </div>
                <div>
                    <RadzenLabel Text="Slut Dato:" Component="EndDate" />
                    <RadzenDatePicker @bind-Value=@EndDate ShowTime="true" HoursStep="1" MinutesStep="5" DateFormat="dd/MM/yyyy HH:mm" Name="EndDate" />
                </div>
                <div>
                    <RadzenButton style="width: 160px" BusyText="Henter Data" IsBusy=@busy Click=@OnFilterClick Text="Filtrer" />
                    <RadzenButton style="width: 160px" BusyText="Henter Data" IsBusy=@busy Click=@OnFilterResetClick Text="Nulstil" />
                </div>


            </RadzenCard>
            <RadzenChart>
                <style>
                    .rz-chart svg {
                        overflow: visible;
                    }
                </style>
                <RadzenLineSeries Data="@temperatures" CategoryProperty="TimeStamp" Title="Temperatur" LineType="LineType.Dashed" ValueProperty="Temperature">
                    <RadzenMarkers Visible="@showMarkers" MarkerType="MarkerType.Circle" />

                </RadzenLineSeries>
                <RadzenCategoryAxis Formatter=@(value => ((DateTime)value).ToString())>
                    <RadzenTicks>
                        <Template>
                            <style>
                                .rz-tick-text {
                                    overflow: visible;
                                }
                            </style>
                            <text class="rz-tick-text" style="text-anchor: start; transform: translate(@(context.X)px, @(context.Y + 10)px) rotate(45deg);">@context.Value</text>
                        </Template>
                    </RadzenTicks>
                </RadzenCategoryAxis>
            </RadzenChart>
        </div>
    </div>
    <div class="row">
        <div class="col-5 border shadow-sm d-flex flex-column justify-content-center text-center mt-3" style="min-height: 25rem; border-radius:10px;">
            <h1>@($"Distance: {distanceSensor.Distance}")</h1>
            <div class="border m-auto my-2 w-50 shadow-lg"></div>
            <div class="col-12 d-flex justify-content-center">
                <h5 style="color:gray;" class="fst-italic">@distanceSensor.TimeStamp.ToString("dd/MM/yyyy HH:mm")</h5>
            </div>
        </div>
        <div class="col-2"></div>
        <div class="col-5 border shadow-sm d-flex flex-column justify-content-center text-center mt-3" style="min-height: 25rem; border-radius:10px;">
            <h1>@($"Induktiv: {inductiveSensor.IsMetal}")</h1>
            <div class="border m-auto my-2 w-50 shadow-lg"></div>
            <div class="col-12 d-flex justify-content-center">
                <h5 style="color:gray;" class="fst-italic">@inductiveSensor.TimeStamp.ToString("dd/MM/yyyy HH:mm")</h5>
            </div>
        </div>
    </div>
</div>


@code {

    bool busy;
    bool filter = false;
    bool showMarkers = true;
    DateTime StartDate = DateTime.Now.AddHours(-1);
    DateTime EndDate = DateTime.Now;
    List<TemperatureSensor> temperatures = new();
    TemperatureSensor temperatureSensor = new();
    DistanceSensor distanceSensor = new();
    InductiveSensor inductiveSensor = new();
    HubConnection Connection = default!;


    protected override async Task OnInitializedAsync()
    {
        Connection = new HubConnectionBuilder()
               .WithUrl("https://localhost:7075/sensorhub")
              .Build();

        Connection.On<List<TemperatureSensor>>("ReceiveTemperatureSensorList", async (receivedTemperatures) =>
        {
            temperatures = receivedTemperatures;
            temperatures = temperatures.Where(x => x.TimeStamp >= DateTime.Now.AddDays(-1)).ToList();
            await InvokeAsync(StateHasChanged);

        });

        Connection.On<TemperatureSensor>("ReceiveLatestTemperature", async (receivedTemperature) =>
        {
            if (!filter)
            {
                temperatureSensor = receivedTemperature;
                temperatures.Add(receivedTemperature);
            }


            // allDeviceTelemetries = GetSortedTelemetriesTime();
            // deviceTelemetries = GetSortedTelemtriesDevice();

            await InvokeAsync(StateHasChanged);
        });

        Connection.On<DistanceSensor>("ReceiveDistanceSensor", async (receivedDistance) =>
       {
           distanceSensor = receivedDistance;

           await InvokeAsync(StateHasChanged);
       });

        Connection.On<InductiveSensor>("ReceiveInductiveSensor", async (receivedInductive) =>
       {
           inductiveSensor = receivedInductive;

           await InvokeAsync(StateHasChanged);
       });


        await Connection.StartAsync();

        await Connection.SendAsync("GetTemperatureSensor");
    }


    async Task OnFilterClick()
    {
        busy = true;
        await Connection.SendAsync("GetTemperatureSensor");
        temperatures = temperatures.Where(x => x.TimeStamp >= StartDate && x.TimeStamp <= EndDate).ToList();
        filter = true;
        busy = false;
    }

    async Task OnFilterResetClick()
    {
        filter = false;
        await Connection.SendAsync("GetTemperatureSensor");
    }


}
